I"B<h1 id="第六章-传输层">第六章 传输层</h1>

<ul>
  <li>
    <h3 id="套接字概念">套接字概念</h3>
    <blockquote>
      <p>在传输层协议接收到数据后，如何区分数据到底是发送给哪一个应用程序的呢? 
在TCP 和 UDP 协议中引入了端口(Port)和套接字(Socket)的概念。</p>
    </blockquote>
  </li>
</ul>

<blockquote>
  <p>▶端口号:16 位的标志符，标识传输层协议和应用程序之间的数据接口，端口号是由不同的主机上的 TCP 和 UDP 协议独立分配的，所以不可能全局唯一。</p>
</blockquote>

<blockquote>
  <p>▶套接字:端口号+IP 地址，唯一标识一端。在 TCP 协议中，一条连接两端的套接字就可以唯一标识该连接了.</p>
</blockquote>

<h2 id="一传输层协议要素">（一）传输层协议要素</h2>

<ul>
  <li>
    <h3 id="寻址">寻址</h3>
  </li>
</ul>

<blockquote>
  <p>传输地址：TSAP 在 Internet 上称为端口</p>
</blockquote>

<blockquote>
  <p>①一些服务采用固定的 TSAP 端口②当用户的端口无法事先预知 （如 BitTorrent）</p>
</blockquote>

<blockquote>
  <p>▶存在一个叫端口映射器的进程，用户先连接映射器进程，递交需连接服务名称， 由映射器进程返回对应 TSAP 地址。</p>
</blockquote>

<blockquote>
  <p>▶初始连接协议—进程服务器同时监听一组端口。有连接请求时，启动对应服务器。</p>
</blockquote>

<blockquote>
  <p>Unix 中的 inetd</p>
</blockquote>

<ul>
  <li>
    <h3 id="连接建立">连接建立</h3>
  </li>
</ul>

<blockquote>
  <p>▶重复请求分组的判定</p>
</blockquote>

<blockquote>
  <p>.判定重放攻击、延迟很久重发后又到达（银行转账请求，延迟重复）</p>
</blockquote>

<blockquote>
  <p>▶可能的措施：</p>
</blockquote>

<blockquote>
  <p>①一次性传输地址</p>
</blockquote>

<blockquote>
  <p>②每个连接唯一的标识符（序号，递增）</p>
</blockquote>

<blockquote>
  <p>收到连接请求，判定是否是原来释放的连接。</p>
</blockquote>

<blockquote>
  <p>缺点：需要保存历史信息，一旦机器崩溃无法获知旧的连接标识</p>
</blockquote>

<blockquote>
  <p>③将分组的生命期控制在一定范围内拥塞延迟上界，限制跳数，时间戳</p>
</blockquote>

<blockquote>
  <p>▶安全连接方法</p>
</blockquote>

<blockquote>
  <p>目标: 确保编号相同的 TPDU 永远不会同时有效</p>
</blockquote>

<blockquote>
  <p>①源端用序号作为段的标签（要求序号空间足够大，当回绕使用时，相同序列号 TPDU 早已经消失。）</p>
</blockquote>

<blockquote>
  <p>②当建立一个连接时，采用时钟的低K 位用作初始序号，有了序号，可以用任何一个滑动窗口协议控制数据流。</p>
</blockquote>

<p><img src="https://cdn.jsdelivr.net/gh/btbsja/btbsjaimg@master/img202003/07/110106-972515.png" alt="image-20200307110104928" /></p>

<blockquote>
  <p>问题：</p>

  <p>发送速度过快，由下进入禁区。---每个连接上的最大速率是每个时钟滴答发</p>

  <p>送一段</p>

  <p>低于时钟速率，从左边进入禁止区间。因此发送每个 TPDU 前，应判定是否进入。若是，延迟T 秒或重新同步序列号。--应该限制连接序号递增的速度太慢。</p>
</blockquote>

<p><img src="https://cdn.jsdelivr.net/gh/btbsja/btbsjaimg@master/img202003/07/110120-557495.png" alt="image-20200307110119186" /></p>

<ul>
  <li>
    <p><strong>差错和流量控制</strong></p>
  </li>
  <li>
    <p><strong>多路复用和逆向多路复用</strong></p>
  </li>
</ul>

<blockquote>
  <p>多路复用-多个传输层连接共用一个网络连接</p>

  <p>逆向多路复用-有多条网络连接，把一个连接上的流量分摊到多条网络路径上。</p>
</blockquote>

<ul>
  <li><strong>崩溃恢复</strong></li>
</ul>

<p><img src="https://cdn.jsdelivr.net/gh/btbsja/btbsjaimg@master/img202003/07/110226-572677.png" alt="image-20200307110225598" /></p>

<h2 id="二tcp-协议概述">（二）TCP 协议概述</h2>

<ul>
  <li><strong>TCP-功能概述</strong></li>
</ul>

<blockquote>
  <p>▶多路复用数据流</p>

  <p>TCP 利用端口实现了同时接收多个应用数据，跟踪记录报文要转发到的应用程序，因此可以完成将多个应用的数据流的复用。</p>

  <p>▶实现可靠传输</p>

  <p>TCP 协议中采用滑动窗口协议来实现可靠传输、超时重传。TCP 头的校验和域可以实现对 TCP 段的校验，来验证 TCP 段的完整性。TCP 协议中采用确认应答机制保证数据段的可靠传输。</p>

  <p>▶流量控制和拥塞控制</p>

  <p>TCP 使用窗口大小实现传输连接上的流量控制。目的主机通过设置窗口大小来通知发送主机能够发送的数据量大小。同时利用重发定时器实现部分拥塞控制功能。</p>

  <p>TCP 是全双工的，并且是点到点的，不支持组播或者广播形式</p>

  <p>TCP 是字节流，不保留消息边界</p>
</blockquote>

<ul>
  <li>一些已经分配</li>
</ul>

<p><img src="https://cdn.jsdelivr.net/gh/btbsja/btbsjaimg@master/img202003/07/111916-42554.png" alt="image-20200307110852395" /></p>

<blockquote>
  <p>1024 以下的端口被保留，只能用作由特权用户启动的标准服务-知名端口</p>

  <p>（well-known port）</p>
</blockquote>

<ul>
  <li>
    <h3 id="tcp-段格式">TCP 段格式</h3>
  </li>
</ul>

<p><img src="https://cdn.jsdelivr.net/gh/btbsja/btbsjaimg@master/img202003/07/111919-580885.png" alt="image-20200307110903173" /></p>

<blockquote>
  <p>源端口和目的端口：各 16 位,分别表示源主机和目的主机的端口号。</p>
</blockquote>

<blockquote>
  <p>顺序号：32 位，以字节为单位对数据段编号，表示该数据段的第一个字节的编号。</p>
</blockquote>

<blockquote>
  <p>确认号：32 位，标识期望下次收到的第一个数据字节的序号</p>
</blockquote>

<blockquote>
  <p>TCP 头长域：4 位，表示 TCP 头部（包含可选项域）的长度包含多少个 32 位字。TCP 头长域后的 4 位是保留域，为将来定义新的用途保留。</p>
</blockquote>

<blockquote>
  <p>8 位的标识位：置 1 时表示有效。</p>
</blockquote>

<blockquote>
  <p>URG： 和紧急指针配合使用，发送紧急数据，使一端可以告诉另一端有些具有某种方式的” 紧急数据” 已经放置在普通的数据流中，由接收方决定如何处理。此时与后面的”紧急指针” 相结合，该紧急指针被置为一个正的偏移量，表示紧急数据的长度，该偏移量必须与 TCP 首部中的序号字段相加，以便得出紧急数据的最后一个字节的序号。即使窗口大小为０时也可以发送紧急数据。</p>
</blockquote>

<blockquote>
  <p>ACK：当ACK =1 时，表示确认号有效。</p>
</blockquote>

<blockquote>
  <p>PSH：当 PSH=1 时，表明请求远地 TCP 将本报文段立即传送给其应用层，而不要等到整个缓冲区都填满了后再向上交付。</p>
</blockquote>

<blockquote>
  <p>RST：当 RST=1 时，表明出现严重差错（如由于主机崩溃或其他原因），必须释放连接，然后再重建传输连接。它还可用来拒绝一个非法的数据段或拒绝连接请求。</p>
</blockquote>

<blockquote>
  <p>SYN： 用于建立连接；SYN=1，ACK=0，表示连接请求数据段，SYN=1，ACK＝1 表示连接响应数据段 。</p>
</blockquote>

<blockquote>
  <p>FIN： 用于释放连接。当置位时表示发送方已没有数据发送了。</p>
</blockquote>

<blockquote>
  <p>CWR 和ECE 用作拥塞控制的信号</p>
</blockquote>

<blockquote>
  <p>当接收端收到来自网络层的拥塞指示后，设置 ECE，给发送方提示拥塞（ECN- echo）。发送端设置 CWR 信号，表示发送方已经减慢发送速度,不必再发 ECN-echo</p>
</blockquote>

<blockquote>
  <p>窗口大小域: 16 位,目的机使用该域告诉源主机，在确认了的字节后还可以发送多少个字节。</p>
</blockquote>

<blockquote>
  <p>校验和：16 位，校验和域是 TCP 协议提供的一种检错机制。在计算校验和时要包括 TCP 包的头和数据以及一个伪包头。</p>
</blockquote>

<blockquote>
  <p>紧急指针域：是一个可选的 1 6 位指针，指向段内的最后一个字节位置，这个域只在 URG 标志设置了时才有效。</p>
</blockquote>

<blockquote>
  <p>选项域：在 TCP 头的固定部分后可以使用选项来进行一些参数的协商。</p>
</blockquote>

<p><img src="https://cdn.jsdelivr.net/gh/btbsja/btbsjaimg@master/img202003/07/111925-501486.png" alt="image-20200307111229547" /></p>

<h2 id="三tcp-的连接数据段传输和释放管理">（三）TCP 的连接、数据段传输和释放管理</h2>

<ul>
  <li>TCP 连接建立 (SYN 泛洪</li>
</ul>

<p><img src="https://cdn.jsdelivr.net/gh/btbsja/btbsjaimg@master/img202003/07/111928-376121.png" alt="image-20200307111328285" /></p>

<ul>
  <li>TCP 数据段传输</li>
</ul>

<p><img src="upload\image-20200307111313690.png" alt="image-20200307111313690" /></p>

<ul>
  <li>0 窗口处理</li>
</ul>

<p>窗口探测</p>

<ol>
  <li>
    <p>发送紧急数据</p>
  </li>
  <li>
    <p>发送 1 字节段，强制接收端重新宣告下一个期望的字节和窗口大小</p>

    <p>TCP 提高传输效率的策略</p>
  </li>
</ol>

<blockquote>
  <p>▶Nagle 算法</p>

  <p>发送端只发送第一次到达的数据字节，并将其后到达的字节缓冲起来，直到发送出去的那个数据包被确认，将所有缓冲的字节放在一个 TCP 段中发送出去。</p>
</blockquote>

<blockquote>
  <p>问题：（1）玩游戏（2）与延迟确认的相互作用</p>

  <p>▶接收方延迟确认</p>

  <p>将确认和窗口更新延迟 50ms，提高确认搭载的机会。</p>

  <p>▶Clark 算法</p>

  <p>解决傻瓜窗口症状（silly window syndrome）。 接收端发送只有一个字节的窗口更新段。</p>
</blockquote>

<p><img src="https://cdn.jsdelivr.net/gh/btbsja/btbsjaimg@master/img202003/07/111439-147356.png" alt="image-20200307111437809" /></p>

<h2 id="四tcp-定时器管理">（四）TCP 定时器管理</h2>

<ul>
  <li>重发定时器(retransmission timer)</li>
</ul>

<blockquote>
  <p>▶每次传输一个数据段时，启动一个数据重发定时器。</p>

  <p>.如果在定时器超时前被确认，则关闭该定时器；</p>

  <p>.相反，超时重传数据段并重新开始计时。</p>

  <p>.重发定时器也可以间接地用于管理网络拥塞，因为当超时出现时可能是由于网络拥塞造成的，这时发送方就减慢传输速率，从而减小自身对拥塞的影响。</p>
</blockquote>

<blockquote>
  <p>▶超时阈值的确定（RTT 往返时间）</p>

  <p><img src="https://cdn.jsdelivr.net/gh/btbsja/btbsjaimg@master/img202003/07/111500-310692.png" alt="image-20200307111500572" /></p>
</blockquote>

<ul>
  <li>持续定时器( Persistence timer)</li>
</ul>

<blockquote>
  <p>▶持续定时器用于防止出现以下死锁情况：如果接收方主机发生了缓冲上溢情况，就会发送一个窗口为 0 的应答，通知发送方等待。发送主机收到后就会中止发</p>

  <p>送,等待接收方窗口为非 0 的确认,才会重新开始发送。</p>

  <p>▶如果接收方主机发出的修正窗口分组丢失了，发送方和接收方都会等待对方的进一步动作，这就出现了死锁的情况。当发送方收到窗口为 0 的应答时，等待并启动持续定时器，当持续定时器超时，发送方就向接收方发送一探测数据段。接收方应答中应包含窗口大小。如果窗口仍为 0，则重新设置持续定时器。如果查询仍不能得到窗口大小，TCP 协议会重新设置连接。</p>
</blockquote>

<ul>
  <li>保活定时器（keepalive timer）</li>
</ul>

<blockquote>
  <p>当一个连接长时间闲置时，保活定时器会超时而使一方去检测另一方是否仍然存在。如果未得到响应，就终止该连接。</p>
</blockquote>

<ul>
  <li>TCP 连接的定时器</li>
</ul>

<blockquote>
  <p>用于每个 TCP 连接的定时器是用在断开连接操作中的 TIME WAIT 状态，设置为分组最长生命期的两倍，以确保当一个连接断开后，由它创建的分组完全消失。</p>
</blockquote>

<h2 id="五tcp-的拥塞控制策略">（五）TCP 的拥塞控制策略</h2>

<ul>
  <li>基本概念</li>
</ul>

<blockquote>
  <p>▶在端到端的连接中，导致网络拥塞的两个潜在因素是网络能力和接收能力。当网络快而接收方缓存小时，拥塞发生在接收方主机处；当接收方具有足够的缓存而网络比较慢时，拥塞发生在网络中的某个地方。</p>

  <p>▶TCP 协议实现中发送方维持了两个窗口：可变发送窗口和拥塞窗口，按两个窗口的最小值进行发送。可变发送窗口由接收方的缓存能力决定。</p>
</blockquote>

<p>拥塞窗口依照<strong>慢速启动（ slow start） 算法和拥塞避免（ congestionavoidance）算法</strong>变化。</p>

<p><img src="https://cdn.jsdelivr.net/gh/btbsja/btbsjaimg@master/img202003/07/111552-132798.png" alt="image-20200307111549824" /></p>

<ul>
  <li>慢速启动算法</li>
</ul>

<blockquote>
  <p><img src="upload\image-20200307111556278.png" alt="image-20200307111556278" /></p>
</blockquote>

<ul>
  <li>拥塞避免算法</li>
</ul>

<blockquote>
  <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Until (loss event) {每个 RTT 才加 1
every w segments ACKed:
Congwin++
}
threshold = Congwin/2
Congwin = 1
perform slowstart
</code></pre></div>  </div>

</blockquote>

<p><img src="https://cdn.jsdelivr.net/gh/btbsja/btbsjaimg@master/img202003/07/111650-857745.png" alt="image-20200307111646630" /></p>

<blockquote>
  <p>▶重复确认</p>
</blockquote>

<p><img src="https://cdn.jsdelivr.net/gh/btbsja/btbsjaimg@master/img202003/07/111720-878619.png" alt="image-20200307111713495" /></p>

<ul>
  <li>
    <p>三个连续的重复确认,意味着可能已经丢失了1 个包-&gt;快速重传</p>
  </li>
  <li>
    <p>拥塞窗口大小在慢速启动和拥塞避免算法作用下的变化情况变化</p>
  </li>
</ul>

<h2 id="六udp-协议">（六）UDP 协议</h2>

<blockquote>
  <p>▶UDP 提供无连接服务，不能保证数据完整地到达目的地，也没有流量和拥塞控制机制。</p>

  <p>▶UDP 保留应用程序定义的报文边界，不把两个应用程序报文组合在一起，也不把单个应用报文划分成几个部分。</p>

  <p>▶UDP 是小的、节约资源的传输层协议。它的操作执行比 TCP 快得多。</p>

  <p>▶UDP 功能</p>

  <p>.提供了一个与 IP 协议的接口，通过端口号复用多个进程</p>

  <p>.可选的端到端错误检测功能</p>
</blockquote>

<p><img src="https://cdn.jsdelivr.net/gh/btbsja/btbsjaimg@master/img202003/07/111744-242728.png" alt="image-20200307111744359" /></p>

<p><img src="https://cdn.jsdelivr.net/gh/btbsja/btbsjaimg@master/img202003/07/111754-8714.png" alt="image-20200307111751967" /></p>

<ul>
  <li>UDP 的特点</li>
</ul>

<blockquote>
  <p>没有连接建立（可以增加延迟）</p>

  <p>简单：发送方、接收方没有连接状态</p>
</blockquote>

<blockquote>
  <p>小段头</p>

  <p>无拥塞控制：UDP 可以像预期的那样快速地爆炸。</p>

  <p>“无装饰”的互联网传输协议</p>

  <p>“尽力而为”服务，UDP 段可能是：迷路的，交付给应用程序</p>
</blockquote>

<p><img src="https://cdn.jsdelivr.net/gh/btbsja/btbsjaimg@master/img202003/07/111819-232714.png" alt="image-20200307111819033" /></p>

<p><img src="https://cdn.jsdelivr.net/gh/btbsja/btbsjaimg@master/img202003/07/111832-797264.png" alt="image-20200307111830090" /></p>

<blockquote>
  <p>RTP 运行在用户空间，且链接到应用程序中，但又是一个与应用无关的协议， 提供传输设施。在应用层上实现的传输协议。</p>

  <p>基本功能：将几个实时数据流复用到一个 UDP 分组上。</p>

  <p>多媒体应用包括多个音频、视频、文字流等，被送到 RTP 库中（位于多媒体应用的用户空间）。RTP 库将这些流复用到 RTP 分组中，同时编码. 多媒体应用和 RTP 库一起位于用户空间</p>
</blockquote>

<ul>
  <li>UDP 的应用- RTCP(实时传输控制协议)</li>
</ul>

<blockquote>
  <p>处理反馈、同步和用户界面等，不传输数据。</p>

  <p>向源端提供延迟、抖动、带宽、拥塞和其他网络特点的反馈信息。源利用这些信息，改变编码方式以做速率调整</p>

  <p>处理流之间的同步</p>
</blockquote>
:ET